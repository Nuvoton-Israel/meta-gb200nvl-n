From a8ef0ce08cc5f527c7d76fd0c2de976962d627e3 Mon Sep 17 00:00:00 2001
From: Tomer Maimon <tmaimon77@gmail.com>
Date: Mon, 28 Apr 2025 15:17:21 +0300
Subject: [PATCH 4/5] net: ethernet: stmmac: add sgmii 100 and 10 support

Signed-off-by: Tomer Maimon <tmaimon77@gmail.com>
---
 .../net/ethernet/stmicro/stmmac/stmmac_main.c | 28 +++++++++++++++++++
 .../ethernet/stmicro/stmmac/stmmac_platform.c | 22 +++++++++------
 2 files changed, 41 insertions(+), 9 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index c25550afcdca..27c03ed92459 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -52,6 +52,13 @@
 #include "hwif.h"
 #include <net/ncsi.h>
 
+extern void __iomem *npcm_base;
+extern bool sgmii_npcm;
+
+#define IND_AC_INDX    0x1FE
+#define SR_MII_CTRL    0x003E0000 
+#define SR_MII_CTRL1   0x003F0000
+
 /* As long as the interface is active, we keep the timestamping counter enabled
  * with fine resolution and binary rollover. This avoid non-monotonic behavior
  * (clock jumps) when changing timestamping settings at runtime.
@@ -1089,6 +1096,27 @@ static void stmmac_mac_link_up(struct phylink_config *config,
 		}
 	}
 
+	if (sgmii_npcm) {
+		u16 RegValue; 
+
+		iowrite16((u16)(SR_MII_CTRL >> 9), npcm_base + IND_AC_INDX);
+		RegValue = ioread16(npcm_base + 0x2);
+		RegValue = ioread16(npcm_base + 0x0);
+		RegValue &= 0xDFBF;
+		switch (speed) {
+		case SPEED_1000:
+			RegValue |= BIT(6);
+			break;
+		case SPEED_100:
+			RegValue |= BIT(13);
+			break;
+		case SPEED_10:
+			break;
+		}
+
+		iowrite16(RegValue, npcm_base + 0x0);
+	}
+
 	priv->speed = speed;
 
 	if (priv->plat->fix_mac_speed)
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c
index c95632ffd8a7..360cde750043 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c
@@ -20,6 +20,9 @@
 #include "stmmac.h"
 #include "stmmac_platform.h"
 
+void __iomem *npcm_base;
+bool sgmii_npcm = false;
+
 #define IND_AC_INDX	0x1FE
 #define SR_MII_CTRL	0x003E0000
 
@@ -422,7 +425,6 @@ stmmac_probe_config_dt(struct platform_device *pdev, u8 *mac)
 	struct device_node *np = pdev->dev.of_node;
 	struct plat_stmmacenet_data *plat;
 	struct stmmac_dma_cfg *dma_cfg;
-	void __iomem *base;
 	u16 RegValue;
 	int phy_mode;
 	void *ret;
@@ -665,19 +667,21 @@ stmmac_probe_config_dt(struct platform_device *pdev, u8 *mac)
 	}
 
 	if (of_device_is_compatible(np, "nuvoton,npcm-dwmac")) {
-		base = devm_platform_ioremap_resource(pdev, 1);
-		if (IS_ERR(base)) {
+		sgmii_npcm = true;
+		npcm_base = devm_platform_ioremap_resource(pdev, 1);
+		if (IS_ERR(npcm_base)) {
 			dev_warn(&pdev->dev, "devm_platform_ioremap_resource failed\n");
+			sgmii_npcm = false;
 		}
-		iowrite16((u16)(SR_MII_CTRL >> 9), base + IND_AC_INDX);
-		RegValue = ioread16(base + 0x2);
-		RegValue = ioread16(base + 0x0);
+		iowrite16((u16)(SR_MII_CTRL >> 9), npcm_base + IND_AC_INDX);
+		RegValue = ioread16(npcm_base + 0x2);
+		RegValue = ioread16(npcm_base + 0x0);
 		RegValue |= BIT(15);
-		iowrite16(RegValue, base + 0x0);
+		iowrite16(RegValue, npcm_base + 0x0);
 		while (RegValue & BIT(15))
-			RegValue = ioread16(base + 0x0);
+			RegValue = ioread16(npcm_base + 0x0);
 		RegValue &= ~(BIT(12));
-		iowrite16(RegValue, base + 0x0);
+		iowrite16(RegValue, npcm_base + 0x0);
 	}
 
 	return plat;
-- 
2.43.0

