From 3787b0123fee6ef9e2a9afb95f8c630746fcc2a2 Mon Sep 17 00:00:00 2001
From: Tomer Maimon <tmaimon77@gmail.com>
Date: Tue, 6 May 2025 14:23:11 +0300
Subject: [PATCH 2/3] spi: npcm-fiu: enable direct write support

Adding direct write support for FIUX, the user can choose which CS will
use direct write by setting nuvoton,dr_wr_en <cs number> in the FIU
device tree, for example:
nuvoton,dr_wr_en = <1 3>; enable direct writing at CS1 and CS3

To enable direct write add CONFIG_NPCM_FIU_WR_DR_EN configuration.

Signed-off-by: Tomer Maimon <tmaimon77@gmail.com>
---
 drivers/spi/Kconfig        |  6 +++
 drivers/spi/spi-npcm-fiu.c | 75 +++++++++++++++++++++++++++++++++++++-
 2 files changed, 80 insertions(+), 1 deletion(-)

diff --git a/drivers/spi/Kconfig b/drivers/spi/Kconfig
index 3a8b5f79f7f1..74c032577d1a 100644
--- a/drivers/spi/Kconfig
+++ b/drivers/spi/Kconfig
@@ -730,6 +730,12 @@ config SPI_WPCM_FIU
 	  This driver does not support generic SPI. The implementation only
 	  supports the spi-mem interface.
 
+config NPCM_FIU_WR_DR_EN
+     bool "Enable FIU NPCM direct write"
+     default n
+     help
+       This option enables FIU NPCM direct write.
+
 config SPI_NPCM_FIU
 	tristate "Nuvoton NPCM FLASH Interface Unit"
 	depends on ARCH_NPCM || COMPILE_TEST
diff --git a/drivers/spi/spi-npcm-fiu.c b/drivers/spi/spi-npcm-fiu.c
index 6b40571f5e34..05c793cd2e58 100644
--- a/drivers/spi/spi-npcm-fiu.c
+++ b/drivers/spi/spi-npcm-fiu.c
@@ -240,6 +240,9 @@ struct npcm_fiu_chip {
 	void __iomem *flash_region_mapped_ptr;
 	struct npcm_fiu_spi *fiu;
 	unsigned long clkrate;
+#ifdef CONFIG_NPCM_FIU_WR_DR_EN
+	bool directw_wr_en;
+#endif
 	u32 chipselect;
 };
 
@@ -247,6 +250,9 @@ struct npcm_fiu_spi {
 	struct npcm_fiu_chip chip[NPCM_MAX_CHIP_NUM];
 	const struct npcm_fiu_info *info;
 	struct spi_mem_op drd_op;
+#ifdef CONFIG_NPCM_FIU_WR_DR_EN
+	struct spi_mem_op dwr_op;
+#endif
 	struct resource *res_mem;
 	struct regmap *regmap;
 	unsigned long clkrate;
@@ -310,6 +316,25 @@ static ssize_t npcm_fiu_direct_read(struct spi_mem_dirmap_desc *desc,
 	return len;
 }
 
+#ifdef CONFIG_NPCM_FIU_WR_DR_EN
+static void npcm_fiu_set_dwr(struct npcm_fiu_spi *fiu,
+			     const struct spi_mem_op *op)
+{
+	regmap_update_bits(fiu->regmap, NPCM_FIU_DWR_CFG,
+			   NPCM_FIU_DWR_CFG_WRCMD, op->cmd.opcode);
+	fiu->dwr_op.cmd.opcode = op->cmd.opcode;
+	regmap_update_bits(fiu->regmap, NPCM_FIU_DWR_CFG,
+			   NPCM_FIU_DWR_CFG_DBPCK,
+			   ilog2(op->data.buswidth) <<
+			   NPCM_FIU_DWR_DBPCK_SHIFT);
+	fiu->dwr_op.data.buswidth = op->data.buswidth;
+	regmap_update_bits(fiu->regmap, NPCM_FIU_DWR_CFG,
+			   NPCM_FIU_DWR_CFG_ABPCK,
+			   ilog2(op->addr.buswidth) <<
+			   NPCM_FIU_DWR_ABPCK_SHIFT);
+	fiu->dwr_op.addr.buswidth = op->addr.buswidth;
+}
+#endif
 static ssize_t npcm_fiu_direct_write(struct spi_mem_dirmap_desc *desc,
 				     u64 offs, size_t len, const void *buf)
 {
@@ -321,11 +346,25 @@ static ssize_t npcm_fiu_direct_write(struct spi_mem_dirmap_desc *desc,
 	const u8 *buf_tx = buf;
 	u32 i;
 
+#ifdef CONFIG_NPCM_FIU_WR_DR_EN
+	if (fiu->spix_mode) {
+		for (i = 0 ; i < len ; i++)
+			iowrite8(*(buf_tx + i), dst + i);
+	} else {
+		if (desc->info.op_tmpl.addr.buswidth != fiu->dwr_op.addr.buswidth ||
+		    desc->info.op_tmpl.data.buswidth != fiu->dwr_op.data.buswidth ||
+		    desc->info.op_tmpl.cmd.opcode != fiu->dwr_op.cmd.opcode)
+			npcm_fiu_set_dwr(fiu, &desc->info.op_tmpl);
+
+		memcpy_toio(dst, buf_tx, len);
+	}
+#else
 	if (fiu->spix_mode)
 		for (i = 0 ; i < len ; i++)
 			iowrite8(*(buf_tx + i), dst + i);
 	else
 		memcpy_toio(dst, buf_tx, len);
+#endif
 
 	return len;
 }
@@ -615,13 +654,20 @@ static int npcm_fiu_dirmap_create(struct spi_mem_dirmap_desc *desc)
 		desc->nodirmap = true;
 		return 0;
 	}
-
+#ifdef CONFIG_NPCM_FIU_WR_DR_EN
+	if (!fiu->spix_mode && !chip->directw_wr_en && desc->info.op_tmpl.data.dir == SPI_MEM_DATA_OUT) {
+#else
 	if (!fiu->spix_mode &&
 	    desc->info.op_tmpl.data.dir == SPI_MEM_DATA_OUT) {
+#endif
 		desc->nodirmap = true;
 		return 0;
 	}
 
+#ifdef CONFIG_NPCM_FIU_WR_DR_EN
+	if (desc->info.op_tmpl.data.dir == SPI_MEM_DATA_OUT)
+		dev_info(fiu->dev, "Write direct enable cs %d\n",desc->mem->spi->chip_select[0]);
+#endif
 	if (!chip->flash_region_mapped_ptr) {
 		chip->flash_region_mapped_ptr =
 			devm_ioremap(fiu->dev, (fiu->res_mem->start +
@@ -659,7 +705,14 @@ static int npcm_fiu_dirmap_create(struct spi_mem_dirmap_desc *desc)
 			npcm_fiux_set_direct_rd(fiu);
 
 	} else {
+#ifdef CONFIG_NPCM_FIU_WR_DR_EN
+		if (!fiu->spix_mode)
+			npcm_fiu_set_dwr(fiu, &desc->info.op_tmpl);
+		else
+			npcm_fiux_set_direct_wr(fiu);
+#else
 		npcm_fiux_set_direct_wr(fiu);
+#endif
 	}
 
 	return 0;
@@ -702,6 +755,10 @@ static int npcm_fiu_probe(struct platform_device *pdev)
 	struct npcm_fiu_spi *fiu;
 	void __iomem *regbase;
 	int id;
+#ifdef CONFIG_NPCM_FIU_WR_DR_EN
+	u32 wr_en[NPCM_MAX_CHIP_NUM];
+	int wr_cnt, i;
+#endif
 
 	ctrl = devm_spi_alloc_host(dev, sizeof(*fiu));
 	if (!ctrl)
@@ -746,6 +803,22 @@ static int npcm_fiu_probe(struct platform_device *pdev)
 	fiu->spix_mode = of_property_read_bool(dev->of_node,
 					       "nuvoton,spix-mode");
 
+#ifdef CONFIG_NPCM_FIU_WR_DR_EN
+	/* 
+	 * this modification will not upstream:
+	 * Adding direct write support for FIUX, the user can choose which 
+	 * CS will use direct write by setting nuvoton,dr_wr_en <cs number> in
+	 * the FIU device tree, for example, nuvoton,dr_wr_en = <1 3>; 
+	 * enable direct writing at CS1 and CS3
+	 */ 
+	wr_cnt = of_property_count_elems_of_size(dev->of_node, "nuvoton,dr_wr_en", sizeof(u32));
+	if (wr_cnt > 0) {
+		of_property_read_u32_array(dev->of_node, "nuvoton,dr_wr_en", wr_en, wr_cnt);
+		for (i = 0 ; i < wr_cnt ; i++)
+			if (wr_en[i] < fiu->info->max_cs)
+				fiu->chip[wr_en[i]].directw_wr_en = true;
+	}
+#endif
 	platform_set_drvdata(pdev, fiu);
 
 	ctrl->mode_bits = SPI_RX_DUAL | SPI_RX_QUAD
-- 
2.43.0

